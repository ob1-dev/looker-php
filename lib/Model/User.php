<?php
/**
 * User
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'avatar_url' => 'string',
        'avatar_url_without_sizing' => 'string',
        'credentials_api3' => '\OpenAPI\Client\Model\CredentialsApi3[]',
        'credentials_email' => '\OpenAPI\Client\Model\CredentialsEmail',
        'credentials_embed' => '\OpenAPI\Client\Model\CredentialsEmbed[]',
        'credentials_google' => '\OpenAPI\Client\Model\CredentialsGoogle',
        'credentials_ldap' => '\OpenAPI\Client\Model\CredentialsLDAP',
        'credentials_looker_openid' => '\OpenAPI\Client\Model\CredentialsLookerOpenid',
        'credentials_oidc' => '\OpenAPI\Client\Model\CredentialsOIDC',
        'credentials_saml' => '\OpenAPI\Client\Model\CredentialsSaml',
        'credentials_totp' => '\OpenAPI\Client\Model\CredentialsTotp',
        'display_name' => 'string',
        'email' => 'string',
        'embed_group_space_id' => 'int',
        'first_name' => 'string',
        'group_ids' => 'int[]',
        'home_folder_id' => 'string',
        'id' => 'int',
        'is_disabled' => 'bool',
        'last_name' => 'string',
        'locale' => 'string',
        'looker_versions' => 'string[]',
        'models_dir_validated' => 'bool',
        'personal_folder_id' => 'int',
        'presumed_looker_employee' => 'bool',
        'role_ids' => 'int[]',
        'sessions' => '\OpenAPI\Client\Model\Session[]',
        'ui_state' => 'array<string,string>',
        'verified_looker_employee' => 'bool',
        'roles_externally_managed' => 'bool',
        'allow_direct_roles' => 'bool',
        'allow_normal_group_membership' => 'bool',
        'allow_roles_from_normal_groups' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'avatar_url' => 'uri-reference',
        'avatar_url_without_sizing' => 'uri-reference',
        'credentials_api3' => null,
        'credentials_email' => null,
        'credentials_embed' => null,
        'credentials_google' => null,
        'credentials_ldap' => null,
        'credentials_looker_openid' => null,
        'credentials_oidc' => null,
        'credentials_saml' => null,
        'credentials_totp' => null,
        'display_name' => null,
        'email' => null,
        'embed_group_space_id' => 'int64',
        'first_name' => null,
        'group_ids' => 'int64',
        'home_folder_id' => null,
        'id' => 'int64',
        'is_disabled' => null,
        'last_name' => null,
        'locale' => null,
        'looker_versions' => null,
        'models_dir_validated' => null,
        'personal_folder_id' => 'int64',
        'presumed_looker_employee' => null,
        'role_ids' => 'int64',
        'sessions' => null,
        'ui_state' => null,
        'verified_looker_employee' => null,
        'roles_externally_managed' => null,
        'allow_direct_roles' => null,
        'allow_normal_group_membership' => null,
        'allow_roles_from_normal_groups' => null,
        'url' => 'uri-reference'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'avatar_url' => 'avatar_url',
        'avatar_url_without_sizing' => 'avatar_url_without_sizing',
        'credentials_api3' => 'credentials_api3',
        'credentials_email' => 'credentials_email',
        'credentials_embed' => 'credentials_embed',
        'credentials_google' => 'credentials_google',
        'credentials_ldap' => 'credentials_ldap',
        'credentials_looker_openid' => 'credentials_looker_openid',
        'credentials_oidc' => 'credentials_oidc',
        'credentials_saml' => 'credentials_saml',
        'credentials_totp' => 'credentials_totp',
        'display_name' => 'display_name',
        'email' => 'email',
        'embed_group_space_id' => 'embed_group_space_id',
        'first_name' => 'first_name',
        'group_ids' => 'group_ids',
        'home_folder_id' => 'home_folder_id',
        'id' => 'id',
        'is_disabled' => 'is_disabled',
        'last_name' => 'last_name',
        'locale' => 'locale',
        'looker_versions' => 'looker_versions',
        'models_dir_validated' => 'models_dir_validated',
        'personal_folder_id' => 'personal_folder_id',
        'presumed_looker_employee' => 'presumed_looker_employee',
        'role_ids' => 'role_ids',
        'sessions' => 'sessions',
        'ui_state' => 'ui_state',
        'verified_looker_employee' => 'verified_looker_employee',
        'roles_externally_managed' => 'roles_externally_managed',
        'allow_direct_roles' => 'allow_direct_roles',
        'allow_normal_group_membership' => 'allow_normal_group_membership',
        'allow_roles_from_normal_groups' => 'allow_roles_from_normal_groups',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'avatar_url' => 'setAvatarUrl',
        'avatar_url_without_sizing' => 'setAvatarUrlWithoutSizing',
        'credentials_api3' => 'setCredentialsApi3',
        'credentials_email' => 'setCredentialsEmail',
        'credentials_embed' => 'setCredentialsEmbed',
        'credentials_google' => 'setCredentialsGoogle',
        'credentials_ldap' => 'setCredentialsLdap',
        'credentials_looker_openid' => 'setCredentialsLookerOpenid',
        'credentials_oidc' => 'setCredentialsOidc',
        'credentials_saml' => 'setCredentialsSaml',
        'credentials_totp' => 'setCredentialsTotp',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'embed_group_space_id' => 'setEmbedGroupSpaceId',
        'first_name' => 'setFirstName',
        'group_ids' => 'setGroupIds',
        'home_folder_id' => 'setHomeFolderId',
        'id' => 'setId',
        'is_disabled' => 'setIsDisabled',
        'last_name' => 'setLastName',
        'locale' => 'setLocale',
        'looker_versions' => 'setLookerVersions',
        'models_dir_validated' => 'setModelsDirValidated',
        'personal_folder_id' => 'setPersonalFolderId',
        'presumed_looker_employee' => 'setPresumedLookerEmployee',
        'role_ids' => 'setRoleIds',
        'sessions' => 'setSessions',
        'ui_state' => 'setUiState',
        'verified_looker_employee' => 'setVerifiedLookerEmployee',
        'roles_externally_managed' => 'setRolesExternallyManaged',
        'allow_direct_roles' => 'setAllowDirectRoles',
        'allow_normal_group_membership' => 'setAllowNormalGroupMembership',
        'allow_roles_from_normal_groups' => 'setAllowRolesFromNormalGroups',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'avatar_url' => 'getAvatarUrl',
        'avatar_url_without_sizing' => 'getAvatarUrlWithoutSizing',
        'credentials_api3' => 'getCredentialsApi3',
        'credentials_email' => 'getCredentialsEmail',
        'credentials_embed' => 'getCredentialsEmbed',
        'credentials_google' => 'getCredentialsGoogle',
        'credentials_ldap' => 'getCredentialsLdap',
        'credentials_looker_openid' => 'getCredentialsLookerOpenid',
        'credentials_oidc' => 'getCredentialsOidc',
        'credentials_saml' => 'getCredentialsSaml',
        'credentials_totp' => 'getCredentialsTotp',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'embed_group_space_id' => 'getEmbedGroupSpaceId',
        'first_name' => 'getFirstName',
        'group_ids' => 'getGroupIds',
        'home_folder_id' => 'getHomeFolderId',
        'id' => 'getId',
        'is_disabled' => 'getIsDisabled',
        'last_name' => 'getLastName',
        'locale' => 'getLocale',
        'looker_versions' => 'getLookerVersions',
        'models_dir_validated' => 'getModelsDirValidated',
        'personal_folder_id' => 'getPersonalFolderId',
        'presumed_looker_employee' => 'getPresumedLookerEmployee',
        'role_ids' => 'getRoleIds',
        'sessions' => 'getSessions',
        'ui_state' => 'getUiState',
        'verified_looker_employee' => 'getVerifiedLookerEmployee',
        'roles_externally_managed' => 'getRolesExternallyManaged',
        'allow_direct_roles' => 'getAllowDirectRoles',
        'allow_normal_group_membership' => 'getAllowNormalGroupMembership',
        'allow_roles_from_normal_groups' => 'getAllowRolesFromNormalGroups',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['avatar_url'] = $data['avatar_url'] ?? null;
        $this->container['avatar_url_without_sizing'] = $data['avatar_url_without_sizing'] ?? null;
        $this->container['credentials_api3'] = $data['credentials_api3'] ?? null;
        $this->container['credentials_email'] = $data['credentials_email'] ?? null;
        $this->container['credentials_embed'] = $data['credentials_embed'] ?? null;
        $this->container['credentials_google'] = $data['credentials_google'] ?? null;
        $this->container['credentials_ldap'] = $data['credentials_ldap'] ?? null;
        $this->container['credentials_looker_openid'] = $data['credentials_looker_openid'] ?? null;
        $this->container['credentials_oidc'] = $data['credentials_oidc'] ?? null;
        $this->container['credentials_saml'] = $data['credentials_saml'] ?? null;
        $this->container['credentials_totp'] = $data['credentials_totp'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['embed_group_space_id'] = $data['embed_group_space_id'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['group_ids'] = $data['group_ids'] ?? null;
        $this->container['home_folder_id'] = $data['home_folder_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['is_disabled'] = $data['is_disabled'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['looker_versions'] = $data['looker_versions'] ?? null;
        $this->container['models_dir_validated'] = $data['models_dir_validated'] ?? null;
        $this->container['personal_folder_id'] = $data['personal_folder_id'] ?? null;
        $this->container['presumed_looker_employee'] = $data['presumed_looker_employee'] ?? null;
        $this->container['role_ids'] = $data['role_ids'] ?? null;
        $this->container['sessions'] = $data['sessions'] ?? null;
        $this->container['ui_state'] = $data['ui_state'] ?? null;
        $this->container['verified_looker_employee'] = $data['verified_looker_employee'] ?? null;
        $this->container['roles_externally_managed'] = $data['roles_externally_managed'] ?? null;
        $this->container['allow_direct_roles'] = $data['allow_direct_roles'] ?? null;
        $this->container['allow_normal_group_membership'] = $data['allow_normal_group_membership'] ?? null;
        $this->container['allow_roles_from_normal_groups'] = $data['allow_roles_from_normal_groups'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url URL for the avatar image (may be generic)
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets avatar_url_without_sizing
     *
     * @return string|null
     */
    public function getAvatarUrlWithoutSizing()
    {
        return $this->container['avatar_url_without_sizing'];
    }

    /**
     * Sets avatar_url_without_sizing
     *
     * @param string|null $avatar_url_without_sizing URL for the avatar image (may be generic), does not specify size
     *
     * @return self
     */
    public function setAvatarUrlWithoutSizing($avatar_url_without_sizing)
    {
        $this->container['avatar_url_without_sizing'] = $avatar_url_without_sizing;

        return $this;
    }

    /**
     * Gets credentials_api3
     *
     * @return \OpenAPI\Client\Model\CredentialsApi3[]|null
     */
    public function getCredentialsApi3()
    {
        return $this->container['credentials_api3'];
    }

    /**
     * Sets credentials_api3
     *
     * @param \OpenAPI\Client\Model\CredentialsApi3[]|null $credentials_api3 API 3 credentials
     *
     * @return self
     */
    public function setCredentialsApi3($credentials_api3)
    {
        $this->container['credentials_api3'] = $credentials_api3;

        return $this;
    }

    /**
     * Gets credentials_email
     *
     * @return \OpenAPI\Client\Model\CredentialsEmail|null
     */
    public function getCredentialsEmail()
    {
        return $this->container['credentials_email'];
    }

    /**
     * Sets credentials_email
     *
     * @param \OpenAPI\Client\Model\CredentialsEmail|null $credentials_email credentials_email
     *
     * @return self
     */
    public function setCredentialsEmail($credentials_email)
    {
        $this->container['credentials_email'] = $credentials_email;

        return $this;
    }

    /**
     * Gets credentials_embed
     *
     * @return \OpenAPI\Client\Model\CredentialsEmbed[]|null
     */
    public function getCredentialsEmbed()
    {
        return $this->container['credentials_embed'];
    }

    /**
     * Sets credentials_embed
     *
     * @param \OpenAPI\Client\Model\CredentialsEmbed[]|null $credentials_embed Embed credentials
     *
     * @return self
     */
    public function setCredentialsEmbed($credentials_embed)
    {
        $this->container['credentials_embed'] = $credentials_embed;

        return $this;
    }

    /**
     * Gets credentials_google
     *
     * @return \OpenAPI\Client\Model\CredentialsGoogle|null
     */
    public function getCredentialsGoogle()
    {
        return $this->container['credentials_google'];
    }

    /**
     * Sets credentials_google
     *
     * @param \OpenAPI\Client\Model\CredentialsGoogle|null $credentials_google credentials_google
     *
     * @return self
     */
    public function setCredentialsGoogle($credentials_google)
    {
        $this->container['credentials_google'] = $credentials_google;

        return $this;
    }

    /**
     * Gets credentials_ldap
     *
     * @return \OpenAPI\Client\Model\CredentialsLDAP|null
     */
    public function getCredentialsLdap()
    {
        return $this->container['credentials_ldap'];
    }

    /**
     * Sets credentials_ldap
     *
     * @param \OpenAPI\Client\Model\CredentialsLDAP|null $credentials_ldap credentials_ldap
     *
     * @return self
     */
    public function setCredentialsLdap($credentials_ldap)
    {
        $this->container['credentials_ldap'] = $credentials_ldap;

        return $this;
    }

    /**
     * Gets credentials_looker_openid
     *
     * @return \OpenAPI\Client\Model\CredentialsLookerOpenid|null
     */
    public function getCredentialsLookerOpenid()
    {
        return $this->container['credentials_looker_openid'];
    }

    /**
     * Sets credentials_looker_openid
     *
     * @param \OpenAPI\Client\Model\CredentialsLookerOpenid|null $credentials_looker_openid credentials_looker_openid
     *
     * @return self
     */
    public function setCredentialsLookerOpenid($credentials_looker_openid)
    {
        $this->container['credentials_looker_openid'] = $credentials_looker_openid;

        return $this;
    }

    /**
     * Gets credentials_oidc
     *
     * @return \OpenAPI\Client\Model\CredentialsOIDC|null
     */
    public function getCredentialsOidc()
    {
        return $this->container['credentials_oidc'];
    }

    /**
     * Sets credentials_oidc
     *
     * @param \OpenAPI\Client\Model\CredentialsOIDC|null $credentials_oidc credentials_oidc
     *
     * @return self
     */
    public function setCredentialsOidc($credentials_oidc)
    {
        $this->container['credentials_oidc'] = $credentials_oidc;

        return $this;
    }

    /**
     * Gets credentials_saml
     *
     * @return \OpenAPI\Client\Model\CredentialsSaml|null
     */
    public function getCredentialsSaml()
    {
        return $this->container['credentials_saml'];
    }

    /**
     * Sets credentials_saml
     *
     * @param \OpenAPI\Client\Model\CredentialsSaml|null $credentials_saml credentials_saml
     *
     * @return self
     */
    public function setCredentialsSaml($credentials_saml)
    {
        $this->container['credentials_saml'] = $credentials_saml;

        return $this;
    }

    /**
     * Gets credentials_totp
     *
     * @return \OpenAPI\Client\Model\CredentialsTotp|null
     */
    public function getCredentialsTotp()
    {
        return $this->container['credentials_totp'];
    }

    /**
     * Sets credentials_totp
     *
     * @param \OpenAPI\Client\Model\CredentialsTotp|null $credentials_totp credentials_totp
     *
     * @return self
     */
    public function setCredentialsTotp($credentials_totp)
    {
        $this->container['credentials_totp'] = $credentials_totp;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Full name for display (available only if both first_name and last_name are set)
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email EMail address
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets embed_group_space_id
     *
     * @return int|null
     */
    public function getEmbedGroupSpaceId()
    {
        return $this->container['embed_group_space_id'];
    }

    /**
     * Sets embed_group_space_id
     *
     * @param int|null $embed_group_space_id (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login
     *
     * @return self
     */
    public function setEmbedGroupSpaceId($embed_group_space_id)
    {
        $this->container['embed_group_space_id'] = $embed_group_space_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]|null
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[]|null $group_ids Array of ids of the groups for this user
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets home_folder_id
     *
     * @return string|null
     */
    public function getHomeFolderId()
    {
        return $this->container['home_folder_id'];
    }

    /**
     * Sets home_folder_id
     *
     * @param string|null $home_folder_id ID string for user's home folder
     *
     * @return self
     */
    public function setHomeFolderId($home_folder_id)
    {
        $this->container['home_folder_id'] = $home_folder_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique Id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled Account has been disabled
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets looker_versions
     *
     * @return string[]|null
     */
    public function getLookerVersions()
    {
        return $this->container['looker_versions'];
    }

    /**
     * Sets looker_versions
     *
     * @param string[]|null $looker_versions Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')
     *
     * @return self
     */
    public function setLookerVersions($looker_versions)
    {
        $this->container['looker_versions'] = $looker_versions;

        return $this;
    }

    /**
     * Gets models_dir_validated
     *
     * @return bool|null
     */
    public function getModelsDirValidated()
    {
        return $this->container['models_dir_validated'];
    }

    /**
     * Sets models_dir_validated
     *
     * @param bool|null $models_dir_validated User's dev workspace has been checked for presence of applicable production projects
     *
     * @return self
     */
    public function setModelsDirValidated($models_dir_validated)
    {
        $this->container['models_dir_validated'] = $models_dir_validated;

        return $this;
    }

    /**
     * Gets personal_folder_id
     *
     * @return int|null
     */
    public function getPersonalFolderId()
    {
        return $this->container['personal_folder_id'];
    }

    /**
     * Sets personal_folder_id
     *
     * @param int|null $personal_folder_id ID of user's personal folder
     *
     * @return self
     */
    public function setPersonalFolderId($personal_folder_id)
    {
        $this->container['personal_folder_id'] = $personal_folder_id;

        return $this;
    }

    /**
     * Gets presumed_looker_employee
     *
     * @return bool|null
     */
    public function getPresumedLookerEmployee()
    {
        return $this->container['presumed_looker_employee'];
    }

    /**
     * Sets presumed_looker_employee
     *
     * @param bool|null $presumed_looker_employee User is identified as an employee of Looker
     *
     * @return self
     */
    public function setPresumedLookerEmployee($presumed_looker_employee)
    {
        $this->container['presumed_looker_employee'] = $presumed_looker_employee;

        return $this;
    }

    /**
     * Gets role_ids
     *
     * @return int[]|null
     */
    public function getRoleIds()
    {
        return $this->container['role_ids'];
    }

    /**
     * Sets role_ids
     *
     * @param int[]|null $role_ids Array of ids of the roles for this user
     *
     * @return self
     */
    public function setRoleIds($role_ids)
    {
        $this->container['role_ids'] = $role_ids;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \OpenAPI\Client\Model\Session[]|null
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \OpenAPI\Client\Model\Session[]|null $sessions Active sessions
     *
     * @return self
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets ui_state
     *
     * @return array<string,string>|null
     */
    public function getUiState()
    {
        return $this->container['ui_state'];
    }

    /**
     * Sets ui_state
     *
     * @param array<string,string>|null $ui_state Per user dictionary of undocumented state information owned by the Looker UI.
     *
     * @return self
     */
    public function setUiState($ui_state)
    {
        $this->container['ui_state'] = $ui_state;

        return $this;
    }

    /**
     * Gets verified_looker_employee
     *
     * @return bool|null
     */
    public function getVerifiedLookerEmployee()
    {
        return $this->container['verified_looker_employee'];
    }

    /**
     * Sets verified_looker_employee
     *
     * @param bool|null $verified_looker_employee User is identified as an employee of Looker who has been verified via Looker corporate authentication
     *
     * @return self
     */
    public function setVerifiedLookerEmployee($verified_looker_employee)
    {
        $this->container['verified_looker_employee'] = $verified_looker_employee;

        return $this;
    }

    /**
     * Gets roles_externally_managed
     *
     * @return bool|null
     */
    public function getRolesExternallyManaged()
    {
        return $this->container['roles_externally_managed'];
    }

    /**
     * Sets roles_externally_managed
     *
     * @param bool|null $roles_externally_managed User's roles are managed by an external directory like SAML or LDAP and can not be changed directly.
     *
     * @return self
     */
    public function setRolesExternallyManaged($roles_externally_managed)
    {
        $this->container['roles_externally_managed'] = $roles_externally_managed;

        return $this;
    }

    /**
     * Gets allow_direct_roles
     *
     * @return bool|null
     */
    public function getAllowDirectRoles()
    {
        return $this->container['allow_direct_roles'];
    }

    /**
     * Sets allow_direct_roles
     *
     * @param bool|null $allow_direct_roles User can be directly assigned a role.
     *
     * @return self
     */
    public function setAllowDirectRoles($allow_direct_roles)
    {
        $this->container['allow_direct_roles'] = $allow_direct_roles;

        return $this;
    }

    /**
     * Gets allow_normal_group_membership
     *
     * @return bool|null
     */
    public function getAllowNormalGroupMembership()
    {
        return $this->container['allow_normal_group_membership'];
    }

    /**
     * Sets allow_normal_group_membership
     *
     * @param bool|null $allow_normal_group_membership User can be a direct member of a normal Looker group.
     *
     * @return self
     */
    public function setAllowNormalGroupMembership($allow_normal_group_membership)
    {
        $this->container['allow_normal_group_membership'] = $allow_normal_group_membership;

        return $this;
    }

    /**
     * Gets allow_roles_from_normal_groups
     *
     * @return bool|null
     */
    public function getAllowRolesFromNormalGroups()
    {
        return $this->container['allow_roles_from_normal_groups'];
    }

    /**
     * Sets allow_roles_from_normal_groups
     *
     * @param bool|null $allow_roles_from_normal_groups User can inherit roles from a normal Looker group.
     *
     * @return self
     */
    public function setAllowRolesFromNormalGroups($allow_roles_from_normal_groups)
    {
        $this->container['allow_roles_from_normal_groups'] = $allow_roles_from_normal_groups;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Link to get this item
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


