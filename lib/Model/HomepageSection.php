<?php
/**
 * HomepageSection
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HomepageSection Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class HomepageSection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HomepageSection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'created_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'detail_url' => 'string',
        'homepage_id' => 'int',
        'homepage_items' => '\OpenAPI\Client\Model\HomepageItem[]',
        'id' => 'int',
        'is_header' => 'bool',
        'item_order' => 'int[]',
        'title' => 'string',
        'updated_at' => '\DateTime',
        'description' => 'string',
        'visible_item_order' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'created_at' => 'date-time',
        'deleted_at' => 'date-time',
        'detail_url' => null,
        'homepage_id' => 'int64',
        'homepage_items' => null,
        'id' => 'int64',
        'is_header' => null,
        'item_order' => 'int64',
        'title' => null,
        'updated_at' => 'date-time',
        'description' => null,
        'visible_item_order' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'created_at' => 'created_at',
        'deleted_at' => 'deleted_at',
        'detail_url' => 'detail_url',
        'homepage_id' => 'homepage_id',
        'homepage_items' => 'homepage_items',
        'id' => 'id',
        'is_header' => 'is_header',
        'item_order' => 'item_order',
        'title' => 'title',
        'updated_at' => 'updated_at',
        'description' => 'description',
        'visible_item_order' => 'visible_item_order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'created_at' => 'setCreatedAt',
        'deleted_at' => 'setDeletedAt',
        'detail_url' => 'setDetailUrl',
        'homepage_id' => 'setHomepageId',
        'homepage_items' => 'setHomepageItems',
        'id' => 'setId',
        'is_header' => 'setIsHeader',
        'item_order' => 'setItemOrder',
        'title' => 'setTitle',
        'updated_at' => 'setUpdatedAt',
        'description' => 'setDescription',
        'visible_item_order' => 'setVisibleItemOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'created_at' => 'getCreatedAt',
        'deleted_at' => 'getDeletedAt',
        'detail_url' => 'getDetailUrl',
        'homepage_id' => 'getHomepageId',
        'homepage_items' => 'getHomepageItems',
        'id' => 'getId',
        'is_header' => 'getIsHeader',
        'item_order' => 'getItemOrder',
        'title' => 'getTitle',
        'updated_at' => 'getUpdatedAt',
        'description' => 'getDescription',
        'visible_item_order' => 'getVisibleItemOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['deleted_at'] = $data['deleted_at'] ?? null;
        $this->container['detail_url'] = $data['detail_url'] ?? null;
        $this->container['homepage_id'] = $data['homepage_id'] ?? null;
        $this->container['homepage_items'] = $data['homepage_items'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['is_header'] = $data['is_header'] ?? null;
        $this->container['item_order'] = $data['item_order'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['visible_item_order'] = $data['visible_item_order'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Time at which this section was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at Time at which this section was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets detail_url
     *
     * @return string|null
     */
    public function getDetailUrl()
    {
        return $this->container['detail_url'];
    }

    /**
     * Sets detail_url
     *
     * @param string|null $detail_url A URL pointing to a page showing further information about the content in the section.
     *
     * @return self
     */
    public function setDetailUrl($detail_url)
    {
        $this->container['detail_url'] = $detail_url;

        return $this;
    }

    /**
     * Gets homepage_id
     *
     * @return int|null
     */
    public function getHomepageId()
    {
        return $this->container['homepage_id'];
    }

    /**
     * Sets homepage_id
     *
     * @param int|null $homepage_id Id reference to parent homepage
     *
     * @return self
     */
    public function setHomepageId($homepage_id)
    {
        $this->container['homepage_id'] = $homepage_id;

        return $this;
    }

    /**
     * Gets homepage_items
     *
     * @return \OpenAPI\Client\Model\HomepageItem[]|null
     */
    public function getHomepageItems()
    {
        return $this->container['homepage_items'];
    }

    /**
     * Sets homepage_items
     *
     * @param \OpenAPI\Client\Model\HomepageItem[]|null $homepage_items Items in the homepage section
     *
     * @return self
     */
    public function setHomepageItems($homepage_items)
    {
        $this->container['homepage_items'] = $homepage_items;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique Id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_header
     *
     * @return bool|null
     */
    public function getIsHeader()
    {
        return $this->container['is_header'];
    }

    /**
     * Sets is_header
     *
     * @param bool|null $is_header Is this a header section (has no items)
     *
     * @return self
     */
    public function setIsHeader($is_header)
    {
        $this->container['is_header'] = $is_header;

        return $this;
    }

    /**
     * Gets item_order
     *
     * @return int[]|null
     */
    public function getItemOrder()
    {
        return $this->container['item_order'];
    }

    /**
     * Sets item_order
     *
     * @param int[]|null $item_order ids of the homepage items in the order they should be displayed
     *
     * @return self
     */
    public function setItemOrder($item_order)
    {
        $this->container['item_order'] = $item_order;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Name of row
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Time at which this section was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the content found in this section.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets visible_item_order
     *
     * @return int[]|null
     */
    public function getVisibleItemOrder()
    {
        return $this->container['visible_item_order'];
    }

    /**
     * Sets visible_item_order
     *
     * @param int[]|null $visible_item_order ids of the homepage items the user can see in the order they should be displayed
     *
     * @return self
     */
    public function setVisibleItemOrder($visible_item_order)
    {
        $this->container['visible_item_order'] = $visible_item_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


