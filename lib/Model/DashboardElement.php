<?php
/**
 * DashboardElement
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DashboardElement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DashboardElement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DashboardElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'body_text' => 'string',
        'body_text_as_html' => 'string',
        'dashboard_id' => 'string',
        'edit_uri' => 'string',
        'id' => 'string',
        'look' => '\OpenAPI\Client\Model\LookWithQuery',
        'look_id' => 'string',
        'lookml_link_id' => 'string',
        'merge_result_id' => 'string',
        'note_display' => 'string',
        'note_state' => 'string',
        'note_text' => 'string',
        'note_text_as_html' => 'string',
        'query' => '\OpenAPI\Client\Model\Query',
        'query_id' => 'int',
        'refresh_interval' => 'string',
        'refresh_interval_to_i' => 'int',
        'result_maker' => '\OpenAPI\Client\Model\ResultMakerWithIdVisConfigAndDynamicFields',
        'result_maker_id' => 'int',
        'subtitle_text' => 'string',
        'title' => 'string',
        'title_hidden' => 'bool',
        'title_text' => 'string',
        'type' => 'string',
        'alert_count' => 'int',
        'title_text_as_html' => 'string',
        'subtitle_text_as_html' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'body_text' => null,
        'body_text_as_html' => null,
        'dashboard_id' => null,
        'edit_uri' => 'uri-reference',
        'id' => null,
        'look' => null,
        'look_id' => null,
        'lookml_link_id' => null,
        'merge_result_id' => null,
        'note_display' => null,
        'note_state' => null,
        'note_text' => null,
        'note_text_as_html' => null,
        'query' => null,
        'query_id' => 'int64',
        'refresh_interval' => null,
        'refresh_interval_to_i' => 'int64',
        'result_maker' => null,
        'result_maker_id' => 'int64',
        'subtitle_text' => null,
        'title' => null,
        'title_hidden' => null,
        'title_text' => null,
        'type' => null,
        'alert_count' => 'int64',
        'title_text_as_html' => null,
        'subtitle_text_as_html' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'body_text' => 'body_text',
        'body_text_as_html' => 'body_text_as_html',
        'dashboard_id' => 'dashboard_id',
        'edit_uri' => 'edit_uri',
        'id' => 'id',
        'look' => 'look',
        'look_id' => 'look_id',
        'lookml_link_id' => 'lookml_link_id',
        'merge_result_id' => 'merge_result_id',
        'note_display' => 'note_display',
        'note_state' => 'note_state',
        'note_text' => 'note_text',
        'note_text_as_html' => 'note_text_as_html',
        'query' => 'query',
        'query_id' => 'query_id',
        'refresh_interval' => 'refresh_interval',
        'refresh_interval_to_i' => 'refresh_interval_to_i',
        'result_maker' => 'result_maker',
        'result_maker_id' => 'result_maker_id',
        'subtitle_text' => 'subtitle_text',
        'title' => 'title',
        'title_hidden' => 'title_hidden',
        'title_text' => 'title_text',
        'type' => 'type',
        'alert_count' => 'alert_count',
        'title_text_as_html' => 'title_text_as_html',
        'subtitle_text_as_html' => 'subtitle_text_as_html'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'body_text' => 'setBodyText',
        'body_text_as_html' => 'setBodyTextAsHtml',
        'dashboard_id' => 'setDashboardId',
        'edit_uri' => 'setEditUri',
        'id' => 'setId',
        'look' => 'setLook',
        'look_id' => 'setLookId',
        'lookml_link_id' => 'setLookmlLinkId',
        'merge_result_id' => 'setMergeResultId',
        'note_display' => 'setNoteDisplay',
        'note_state' => 'setNoteState',
        'note_text' => 'setNoteText',
        'note_text_as_html' => 'setNoteTextAsHtml',
        'query' => 'setQuery',
        'query_id' => 'setQueryId',
        'refresh_interval' => 'setRefreshInterval',
        'refresh_interval_to_i' => 'setRefreshIntervalToI',
        'result_maker' => 'setResultMaker',
        'result_maker_id' => 'setResultMakerId',
        'subtitle_text' => 'setSubtitleText',
        'title' => 'setTitle',
        'title_hidden' => 'setTitleHidden',
        'title_text' => 'setTitleText',
        'type' => 'setType',
        'alert_count' => 'setAlertCount',
        'title_text_as_html' => 'setTitleTextAsHtml',
        'subtitle_text_as_html' => 'setSubtitleTextAsHtml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'body_text' => 'getBodyText',
        'body_text_as_html' => 'getBodyTextAsHtml',
        'dashboard_id' => 'getDashboardId',
        'edit_uri' => 'getEditUri',
        'id' => 'getId',
        'look' => 'getLook',
        'look_id' => 'getLookId',
        'lookml_link_id' => 'getLookmlLinkId',
        'merge_result_id' => 'getMergeResultId',
        'note_display' => 'getNoteDisplay',
        'note_state' => 'getNoteState',
        'note_text' => 'getNoteText',
        'note_text_as_html' => 'getNoteTextAsHtml',
        'query' => 'getQuery',
        'query_id' => 'getQueryId',
        'refresh_interval' => 'getRefreshInterval',
        'refresh_interval_to_i' => 'getRefreshIntervalToI',
        'result_maker' => 'getResultMaker',
        'result_maker_id' => 'getResultMakerId',
        'subtitle_text' => 'getSubtitleText',
        'title' => 'getTitle',
        'title_hidden' => 'getTitleHidden',
        'title_text' => 'getTitleText',
        'type' => 'getType',
        'alert_count' => 'getAlertCount',
        'title_text_as_html' => 'getTitleTextAsHtml',
        'subtitle_text_as_html' => 'getSubtitleTextAsHtml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['body_text'] = $data['body_text'] ?? null;
        $this->container['body_text_as_html'] = $data['body_text_as_html'] ?? null;
        $this->container['dashboard_id'] = $data['dashboard_id'] ?? null;
        $this->container['edit_uri'] = $data['edit_uri'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['look'] = $data['look'] ?? null;
        $this->container['look_id'] = $data['look_id'] ?? null;
        $this->container['lookml_link_id'] = $data['lookml_link_id'] ?? null;
        $this->container['merge_result_id'] = $data['merge_result_id'] ?? null;
        $this->container['note_display'] = $data['note_display'] ?? null;
        $this->container['note_state'] = $data['note_state'] ?? null;
        $this->container['note_text'] = $data['note_text'] ?? null;
        $this->container['note_text_as_html'] = $data['note_text_as_html'] ?? null;
        $this->container['query'] = $data['query'] ?? null;
        $this->container['query_id'] = $data['query_id'] ?? null;
        $this->container['refresh_interval'] = $data['refresh_interval'] ?? null;
        $this->container['refresh_interval_to_i'] = $data['refresh_interval_to_i'] ?? null;
        $this->container['result_maker'] = $data['result_maker'] ?? null;
        $this->container['result_maker_id'] = $data['result_maker_id'] ?? null;
        $this->container['subtitle_text'] = $data['subtitle_text'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['title_hidden'] = $data['title_hidden'] ?? null;
        $this->container['title_text'] = $data['title_text'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['alert_count'] = $data['alert_count'] ?? null;
        $this->container['title_text_as_html'] = $data['title_text_as_html'] ?? null;
        $this->container['subtitle_text_as_html'] = $data['subtitle_text_as_html'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets body_text
     *
     * @return string|null
     */
    public function getBodyText()
    {
        return $this->container['body_text'];
    }

    /**
     * Sets body_text
     *
     * @param string|null $body_text Text tile body text
     *
     * @return self
     */
    public function setBodyText($body_text)
    {
        $this->container['body_text'] = $body_text;

        return $this;
    }

    /**
     * Gets body_text_as_html
     *
     * @return string|null
     */
    public function getBodyTextAsHtml()
    {
        return $this->container['body_text_as_html'];
    }

    /**
     * Sets body_text_as_html
     *
     * @param string|null $body_text_as_html Text tile body text as Html
     *
     * @return self
     */
    public function setBodyTextAsHtml($body_text_as_html)
    {
        $this->container['body_text_as_html'] = $body_text_as_html;

        return $this;
    }

    /**
     * Gets dashboard_id
     *
     * @return string|null
     */
    public function getDashboardId()
    {
        return $this->container['dashboard_id'];
    }

    /**
     * Sets dashboard_id
     *
     * @param string|null $dashboard_id Id of Dashboard
     *
     * @return self
     */
    public function setDashboardId($dashboard_id)
    {
        $this->container['dashboard_id'] = $dashboard_id;

        return $this;
    }

    /**
     * Gets edit_uri
     *
     * @return string|null
     */
    public function getEditUri()
    {
        return $this->container['edit_uri'];
    }

    /**
     * Sets edit_uri
     *
     * @param string|null $edit_uri Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only).
     *
     * @return self
     */
    public function setEditUri($edit_uri)
    {
        $this->container['edit_uri'] = $edit_uri;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique Id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets look
     *
     * @return \OpenAPI\Client\Model\LookWithQuery|null
     */
    public function getLook()
    {
        return $this->container['look'];
    }

    /**
     * Sets look
     *
     * @param \OpenAPI\Client\Model\LookWithQuery|null $look look
     *
     * @return self
     */
    public function setLook($look)
    {
        $this->container['look'] = $look;

        return $this;
    }

    /**
     * Gets look_id
     *
     * @return string|null
     */
    public function getLookId()
    {
        return $this->container['look_id'];
    }

    /**
     * Sets look_id
     *
     * @param string|null $look_id Id Of Look
     *
     * @return self
     */
    public function setLookId($look_id)
    {
        $this->container['look_id'] = $look_id;

        return $this;
    }

    /**
     * Gets lookml_link_id
     *
     * @return string|null
     */
    public function getLookmlLinkId()
    {
        return $this->container['lookml_link_id'];
    }

    /**
     * Sets lookml_link_id
     *
     * @param string|null $lookml_link_id LookML link ID
     *
     * @return self
     */
    public function setLookmlLinkId($lookml_link_id)
    {
        $this->container['lookml_link_id'] = $lookml_link_id;

        return $this;
    }

    /**
     * Gets merge_result_id
     *
     * @return string|null
     */
    public function getMergeResultId()
    {
        return $this->container['merge_result_id'];
    }

    /**
     * Sets merge_result_id
     *
     * @param string|null $merge_result_id ID of merge result
     *
     * @return self
     */
    public function setMergeResultId($merge_result_id)
    {
        $this->container['merge_result_id'] = $merge_result_id;

        return $this;
    }

    /**
     * Gets note_display
     *
     * @return string|null
     */
    public function getNoteDisplay()
    {
        return $this->container['note_display'];
    }

    /**
     * Sets note_display
     *
     * @param string|null $note_display Note Display
     *
     * @return self
     */
    public function setNoteDisplay($note_display)
    {
        $this->container['note_display'] = $note_display;

        return $this;
    }

    /**
     * Gets note_state
     *
     * @return string|null
     */
    public function getNoteState()
    {
        return $this->container['note_state'];
    }

    /**
     * Sets note_state
     *
     * @param string|null $note_state Note State
     *
     * @return self
     */
    public function setNoteState($note_state)
    {
        $this->container['note_state'] = $note_state;

        return $this;
    }

    /**
     * Gets note_text
     *
     * @return string|null
     */
    public function getNoteText()
    {
        return $this->container['note_text'];
    }

    /**
     * Sets note_text
     *
     * @param string|null $note_text Note Text
     *
     * @return self
     */
    public function setNoteText($note_text)
    {
        $this->container['note_text'] = $note_text;

        return $this;
    }

    /**
     * Gets note_text_as_html
     *
     * @return string|null
     */
    public function getNoteTextAsHtml()
    {
        return $this->container['note_text_as_html'];
    }

    /**
     * Sets note_text_as_html
     *
     * @param string|null $note_text_as_html Note Text as Html
     *
     * @return self
     */
    public function setNoteTextAsHtml($note_text_as_html)
    {
        $this->container['note_text_as_html'] = $note_text_as_html;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \OpenAPI\Client\Model\Query|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \OpenAPI\Client\Model\Query|null $query query
     *
     * @return self
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return int|null
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param int|null $query_id Id Of Query
     *
     * @return self
     */
    public function setQueryId($query_id)
    {
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets refresh_interval
     *
     * @return string|null
     */
    public function getRefreshInterval()
    {
        return $this->container['refresh_interval'];
    }

    /**
     * Sets refresh_interval
     *
     * @param string|null $refresh_interval Refresh Interval
     *
     * @return self
     */
    public function setRefreshInterval($refresh_interval)
    {
        $this->container['refresh_interval'] = $refresh_interval;

        return $this;
    }

    /**
     * Gets refresh_interval_to_i
     *
     * @return int|null
     */
    public function getRefreshIntervalToI()
    {
        return $this->container['refresh_interval_to_i'];
    }

    /**
     * Sets refresh_interval_to_i
     *
     * @param int|null $refresh_interval_to_i Refresh Interval as integer
     *
     * @return self
     */
    public function setRefreshIntervalToI($refresh_interval_to_i)
    {
        $this->container['refresh_interval_to_i'] = $refresh_interval_to_i;

        return $this;
    }

    /**
     * Gets result_maker
     *
     * @return \OpenAPI\Client\Model\ResultMakerWithIdVisConfigAndDynamicFields|null
     */
    public function getResultMaker()
    {
        return $this->container['result_maker'];
    }

    /**
     * Sets result_maker
     *
     * @param \OpenAPI\Client\Model\ResultMakerWithIdVisConfigAndDynamicFields|null $result_maker result_maker
     *
     * @return self
     */
    public function setResultMaker($result_maker)
    {
        $this->container['result_maker'] = $result_maker;

        return $this;
    }

    /**
     * Gets result_maker_id
     *
     * @return int|null
     */
    public function getResultMakerId()
    {
        return $this->container['result_maker_id'];
    }

    /**
     * Sets result_maker_id
     *
     * @param int|null $result_maker_id ID of the ResultMakerLookup entry.
     *
     * @return self
     */
    public function setResultMakerId($result_maker_id)
    {
        $this->container['result_maker_id'] = $result_maker_id;

        return $this;
    }

    /**
     * Gets subtitle_text
     *
     * @return string|null
     */
    public function getSubtitleText()
    {
        return $this->container['subtitle_text'];
    }

    /**
     * Sets subtitle_text
     *
     * @param string|null $subtitle_text Text tile subtitle text
     *
     * @return self
     */
    public function setSubtitleText($subtitle_text)
    {
        $this->container['subtitle_text'] = $subtitle_text;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of dashboard element
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_hidden
     *
     * @return bool|null
     */
    public function getTitleHidden()
    {
        return $this->container['title_hidden'];
    }

    /**
     * Sets title_hidden
     *
     * @param bool|null $title_hidden Whether title is hidden
     *
     * @return self
     */
    public function setTitleHidden($title_hidden)
    {
        $this->container['title_hidden'] = $title_hidden;

        return $this;
    }

    /**
     * Gets title_text
     *
     * @return string|null
     */
    public function getTitleText()
    {
        return $this->container['title_text'];
    }

    /**
     * Sets title_text
     *
     * @param string|null $title_text Text tile title
     *
     * @return self
     */
    public function setTitleText($title_text)
    {
        $this->container['title_text'] = $title_text;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets alert_count
     *
     * @return int|null
     */
    public function getAlertCount()
    {
        return $this->container['alert_count'];
    }

    /**
     * Sets alert_count
     *
     * @param int|null $alert_count Count of Alerts associated to a dashboard element
     *
     * @return self
     */
    public function setAlertCount($alert_count)
    {
        $this->container['alert_count'] = $alert_count;

        return $this;
    }

    /**
     * Gets title_text_as_html
     *
     * @return string|null
     */
    public function getTitleTextAsHtml()
    {
        return $this->container['title_text_as_html'];
    }

    /**
     * Sets title_text_as_html
     *
     * @param string|null $title_text_as_html Text tile title text as Html
     *
     * @return self
     */
    public function setTitleTextAsHtml($title_text_as_html)
    {
        $this->container['title_text_as_html'] = $title_text_as_html;

        return $this;
    }

    /**
     * Gets subtitle_text_as_html
     *
     * @return string|null
     */
    public function getSubtitleTextAsHtml()
    {
        return $this->container['subtitle_text_as_html'];
    }

    /**
     * Sets subtitle_text_as_html
     *
     * @param string|null $subtitle_text_as_html Text tile subtitle text as Html
     *
     * @return self
     */
    public function setSubtitleTextAsHtml($subtitle_text_as_html)
    {
        $this->container['subtitle_text_as_html'] = $subtitle_text_as_html;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


