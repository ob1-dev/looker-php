<?php
/**
 * RenderTask
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RenderTask Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RenderTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RenderTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'created_at' => 'string',
        'dashboard_filters' => 'string',
        'dashboard_id' => 'int',
        'dashboard_style' => 'string',
        'finalized_at' => 'string',
        'height' => 'int',
        'id' => 'string',
        'look_id' => 'int',
        'lookml_dashboard_id' => 'string',
        'query_id' => 'int',
        'query_runtime' => 'double',
        'render_runtime' => 'double',
        'result_format' => 'string',
        'runtime' => 'double',
        'status' => 'string',
        'status_detail' => 'string',
        'user_id' => 'int',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'created_at' => null,
        'dashboard_filters' => null,
        'dashboard_id' => 'int64',
        'dashboard_style' => null,
        'finalized_at' => null,
        'height' => 'int64',
        'id' => null,
        'look_id' => 'int64',
        'lookml_dashboard_id' => null,
        'query_id' => 'int64',
        'query_runtime' => 'double',
        'render_runtime' => 'double',
        'result_format' => null,
        'runtime' => 'double',
        'status' => null,
        'status_detail' => null,
        'user_id' => 'int64',
        'width' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'created_at' => 'created_at',
        'dashboard_filters' => 'dashboard_filters',
        'dashboard_id' => 'dashboard_id',
        'dashboard_style' => 'dashboard_style',
        'finalized_at' => 'finalized_at',
        'height' => 'height',
        'id' => 'id',
        'look_id' => 'look_id',
        'lookml_dashboard_id' => 'lookml_dashboard_id',
        'query_id' => 'query_id',
        'query_runtime' => 'query_runtime',
        'render_runtime' => 'render_runtime',
        'result_format' => 'result_format',
        'runtime' => 'runtime',
        'status' => 'status',
        'status_detail' => 'status_detail',
        'user_id' => 'user_id',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'created_at' => 'setCreatedAt',
        'dashboard_filters' => 'setDashboardFilters',
        'dashboard_id' => 'setDashboardId',
        'dashboard_style' => 'setDashboardStyle',
        'finalized_at' => 'setFinalizedAt',
        'height' => 'setHeight',
        'id' => 'setId',
        'look_id' => 'setLookId',
        'lookml_dashboard_id' => 'setLookmlDashboardId',
        'query_id' => 'setQueryId',
        'query_runtime' => 'setQueryRuntime',
        'render_runtime' => 'setRenderRuntime',
        'result_format' => 'setResultFormat',
        'runtime' => 'setRuntime',
        'status' => 'setStatus',
        'status_detail' => 'setStatusDetail',
        'user_id' => 'setUserId',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'created_at' => 'getCreatedAt',
        'dashboard_filters' => 'getDashboardFilters',
        'dashboard_id' => 'getDashboardId',
        'dashboard_style' => 'getDashboardStyle',
        'finalized_at' => 'getFinalizedAt',
        'height' => 'getHeight',
        'id' => 'getId',
        'look_id' => 'getLookId',
        'lookml_dashboard_id' => 'getLookmlDashboardId',
        'query_id' => 'getQueryId',
        'query_runtime' => 'getQueryRuntime',
        'render_runtime' => 'getRenderRuntime',
        'result_format' => 'getResultFormat',
        'runtime' => 'getRuntime',
        'status' => 'getStatus',
        'status_detail' => 'getStatusDetail',
        'user_id' => 'getUserId',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['dashboard_filters'] = $data['dashboard_filters'] ?? null;
        $this->container['dashboard_id'] = $data['dashboard_id'] ?? null;
        $this->container['dashboard_style'] = $data['dashboard_style'] ?? null;
        $this->container['finalized_at'] = $data['finalized_at'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['look_id'] = $data['look_id'] ?? null;
        $this->container['lookml_dashboard_id'] = $data['lookml_dashboard_id'] ?? null;
        $this->container['query_id'] = $data['query_id'] ?? null;
        $this->container['query_runtime'] = $data['query_runtime'] ?? null;
        $this->container['render_runtime'] = $data['render_runtime'] ?? null;
        $this->container['result_format'] = $data['result_format'] ?? null;
        $this->container['runtime'] = $data['runtime'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_detail'] = $data['status_detail'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Date/Time render task was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dashboard_filters
     *
     * @return string|null
     */
    public function getDashboardFilters()
    {
        return $this->container['dashboard_filters'];
    }

    /**
     * Sets dashboard_filters
     *
     * @param string|null $dashboard_filters Filter values to apply to the dashboard queries, in URL query format
     *
     * @return self
     */
    public function setDashboardFilters($dashboard_filters)
    {
        $this->container['dashboard_filters'] = $dashboard_filters;

        return $this;
    }

    /**
     * Gets dashboard_id
     *
     * @return int|null
     */
    public function getDashboardId()
    {
        return $this->container['dashboard_id'];
    }

    /**
     * Sets dashboard_id
     *
     * @param int|null $dashboard_id Id of dashboard to render
     *
     * @return self
     */
    public function setDashboardId($dashboard_id)
    {
        $this->container['dashboard_id'] = $dashboard_id;

        return $this;
    }

    /**
     * Gets dashboard_style
     *
     * @return string|null
     */
    public function getDashboardStyle()
    {
        return $this->container['dashboard_style'];
    }

    /**
     * Sets dashboard_style
     *
     * @param string|null $dashboard_style Dashboard layout style: single_column or tiled
     *
     * @return self
     */
    public function setDashboardStyle($dashboard_style)
    {
        $this->container['dashboard_style'] = $dashboard_style;

        return $this;
    }

    /**
     * Gets finalized_at
     *
     * @return string|null
     */
    public function getFinalizedAt()
    {
        return $this->container['finalized_at'];
    }

    /**
     * Sets finalized_at
     *
     * @param string|null $finalized_at Date/Time render task was completed
     *
     * @return self
     */
    public function setFinalizedAt($finalized_at)
    {
        $this->container['finalized_at'] = $finalized_at;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Output height in pixels. Flowed layouts may ignore this value.
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Id of this render task
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets look_id
     *
     * @return int|null
     */
    public function getLookId()
    {
        return $this->container['look_id'];
    }

    /**
     * Sets look_id
     *
     * @param int|null $look_id Id of look to render
     *
     * @return self
     */
    public function setLookId($look_id)
    {
        $this->container['look_id'] = $look_id;

        return $this;
    }

    /**
     * Gets lookml_dashboard_id
     *
     * @return string|null
     */
    public function getLookmlDashboardId()
    {
        return $this->container['lookml_dashboard_id'];
    }

    /**
     * Sets lookml_dashboard_id
     *
     * @param string|null $lookml_dashboard_id Id of lookml dashboard to render
     *
     * @return self
     */
    public function setLookmlDashboardId($lookml_dashboard_id)
    {
        $this->container['lookml_dashboard_id'] = $lookml_dashboard_id;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return int|null
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param int|null $query_id Id of query to render
     *
     * @return self
     */
    public function setQueryId($query_id)
    {
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets query_runtime
     *
     * @return double|null
     */
    public function getQueryRuntime()
    {
        return $this->container['query_runtime'];
    }

    /**
     * Sets query_runtime
     *
     * @param double|null $query_runtime Number of seconds elapsed running queries
     *
     * @return self
     */
    public function setQueryRuntime($query_runtime)
    {
        $this->container['query_runtime'] = $query_runtime;

        return $this;
    }

    /**
     * Gets render_runtime
     *
     * @return double|null
     */
    public function getRenderRuntime()
    {
        return $this->container['render_runtime'];
    }

    /**
     * Sets render_runtime
     *
     * @param double|null $render_runtime Number of seconds elapsed rendering data
     *
     * @return self
     */
    public function setRenderRuntime($render_runtime)
    {
        $this->container['render_runtime'] = $render_runtime;

        return $this;
    }

    /**
     * Gets result_format
     *
     * @return string|null
     */
    public function getResultFormat()
    {
        return $this->container['result_format'];
    }

    /**
     * Sets result_format
     *
     * @param string|null $result_format Output format: pdf, png, or jpg
     *
     * @return self
     */
    public function setResultFormat($result_format)
    {
        $this->container['result_format'] = $result_format;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return double|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param double|null $runtime Total seconds elapsed for render task
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_detail
     *
     * @return string|null
     */
    public function getStatusDetail()
    {
        return $this->container['status_detail'];
    }

    /**
     * Sets status_detail
     *
     * @param string|null $status_detail Additional information about the current status
     *
     * @return self
     */
    public function setStatusDetail($status_detail)
    {
        $this->container['status_detail'] = $status_detail;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The user account permissions in which the render task will execute
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Output width in pixels
     *
     * @return self
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


