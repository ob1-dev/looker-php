<?php
/**
 * OIDCConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OIDCConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OIDCConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OIDCConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'alternate_email_login_allowed' => 'bool',
        'audience' => 'string',
        'auth_requires_role' => 'bool',
        'authorization_endpoint' => 'string',
        'default_new_user_group_ids' => 'int[]',
        'default_new_user_groups' => '\OpenAPI\Client\Model\Group[]',
        'default_new_user_role_ids' => 'int[]',
        'default_new_user_roles' => '\OpenAPI\Client\Model\Role[]',
        'enabled' => 'bool',
        'groups' => '\OpenAPI\Client\Model\OIDCGroupRead[]',
        'groups_attribute' => 'string',
        'groups_with_role_ids' => '\OpenAPI\Client\Model\OIDCGroupWrite[]',
        'identifier' => 'string',
        'issuer' => 'string',
        'modified_at' => '\DateTime',
        'modified_by' => 'int',
        'new_user_migration_types' => 'string',
        'scopes' => 'string[]',
        'secret' => 'string',
        'set_roles_from_groups' => 'bool',
        'test_slug' => 'string',
        'token_endpoint' => 'string',
        'user_attribute_map_email' => 'string',
        'user_attribute_map_first_name' => 'string',
        'user_attribute_map_last_name' => 'string',
        'user_attributes' => '\OpenAPI\Client\Model\OIDCUserAttributeRead[]',
        'user_attributes_with_ids' => '\OpenAPI\Client\Model\OIDCUserAttributeWrite[]',
        'userinfo_endpoint' => 'string',
        'allow_normal_group_membership' => 'bool',
        'allow_roles_from_normal_groups' => 'bool',
        'allow_direct_roles' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'alternate_email_login_allowed' => null,
        'audience' => null,
        'auth_requires_role' => null,
        'authorization_endpoint' => 'uri-reference',
        'default_new_user_group_ids' => 'int64',
        'default_new_user_groups' => null,
        'default_new_user_role_ids' => 'int64',
        'default_new_user_roles' => null,
        'enabled' => null,
        'groups' => null,
        'groups_attribute' => null,
        'groups_with_role_ids' => null,
        'identifier' => null,
        'issuer' => null,
        'modified_at' => 'date-time',
        'modified_by' => 'int64',
        'new_user_migration_types' => null,
        'scopes' => null,
        'secret' => null,
        'set_roles_from_groups' => null,
        'test_slug' => null,
        'token_endpoint' => null,
        'user_attribute_map_email' => null,
        'user_attribute_map_first_name' => null,
        'user_attribute_map_last_name' => null,
        'user_attributes' => null,
        'user_attributes_with_ids' => null,
        'userinfo_endpoint' => 'uri-reference',
        'allow_normal_group_membership' => null,
        'allow_roles_from_normal_groups' => null,
        'allow_direct_roles' => null,
        'url' => 'uri-reference'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'alternate_email_login_allowed' => 'alternate_email_login_allowed',
        'audience' => 'audience',
        'auth_requires_role' => 'auth_requires_role',
        'authorization_endpoint' => 'authorization_endpoint',
        'default_new_user_group_ids' => 'default_new_user_group_ids',
        'default_new_user_groups' => 'default_new_user_groups',
        'default_new_user_role_ids' => 'default_new_user_role_ids',
        'default_new_user_roles' => 'default_new_user_roles',
        'enabled' => 'enabled',
        'groups' => 'groups',
        'groups_attribute' => 'groups_attribute',
        'groups_with_role_ids' => 'groups_with_role_ids',
        'identifier' => 'identifier',
        'issuer' => 'issuer',
        'modified_at' => 'modified_at',
        'modified_by' => 'modified_by',
        'new_user_migration_types' => 'new_user_migration_types',
        'scopes' => 'scopes',
        'secret' => 'secret',
        'set_roles_from_groups' => 'set_roles_from_groups',
        'test_slug' => 'test_slug',
        'token_endpoint' => 'token_endpoint',
        'user_attribute_map_email' => 'user_attribute_map_email',
        'user_attribute_map_first_name' => 'user_attribute_map_first_name',
        'user_attribute_map_last_name' => 'user_attribute_map_last_name',
        'user_attributes' => 'user_attributes',
        'user_attributes_with_ids' => 'user_attributes_with_ids',
        'userinfo_endpoint' => 'userinfo_endpoint',
        'allow_normal_group_membership' => 'allow_normal_group_membership',
        'allow_roles_from_normal_groups' => 'allow_roles_from_normal_groups',
        'allow_direct_roles' => 'allow_direct_roles',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'alternate_email_login_allowed' => 'setAlternateEmailLoginAllowed',
        'audience' => 'setAudience',
        'auth_requires_role' => 'setAuthRequiresRole',
        'authorization_endpoint' => 'setAuthorizationEndpoint',
        'default_new_user_group_ids' => 'setDefaultNewUserGroupIds',
        'default_new_user_groups' => 'setDefaultNewUserGroups',
        'default_new_user_role_ids' => 'setDefaultNewUserRoleIds',
        'default_new_user_roles' => 'setDefaultNewUserRoles',
        'enabled' => 'setEnabled',
        'groups' => 'setGroups',
        'groups_attribute' => 'setGroupsAttribute',
        'groups_with_role_ids' => 'setGroupsWithRoleIds',
        'identifier' => 'setIdentifier',
        'issuer' => 'setIssuer',
        'modified_at' => 'setModifiedAt',
        'modified_by' => 'setModifiedBy',
        'new_user_migration_types' => 'setNewUserMigrationTypes',
        'scopes' => 'setScopes',
        'secret' => 'setSecret',
        'set_roles_from_groups' => 'setSetRolesFromGroups',
        'test_slug' => 'setTestSlug',
        'token_endpoint' => 'setTokenEndpoint',
        'user_attribute_map_email' => 'setUserAttributeMapEmail',
        'user_attribute_map_first_name' => 'setUserAttributeMapFirstName',
        'user_attribute_map_last_name' => 'setUserAttributeMapLastName',
        'user_attributes' => 'setUserAttributes',
        'user_attributes_with_ids' => 'setUserAttributesWithIds',
        'userinfo_endpoint' => 'setUserinfoEndpoint',
        'allow_normal_group_membership' => 'setAllowNormalGroupMembership',
        'allow_roles_from_normal_groups' => 'setAllowRolesFromNormalGroups',
        'allow_direct_roles' => 'setAllowDirectRoles',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'alternate_email_login_allowed' => 'getAlternateEmailLoginAllowed',
        'audience' => 'getAudience',
        'auth_requires_role' => 'getAuthRequiresRole',
        'authorization_endpoint' => 'getAuthorizationEndpoint',
        'default_new_user_group_ids' => 'getDefaultNewUserGroupIds',
        'default_new_user_groups' => 'getDefaultNewUserGroups',
        'default_new_user_role_ids' => 'getDefaultNewUserRoleIds',
        'default_new_user_roles' => 'getDefaultNewUserRoles',
        'enabled' => 'getEnabled',
        'groups' => 'getGroups',
        'groups_attribute' => 'getGroupsAttribute',
        'groups_with_role_ids' => 'getGroupsWithRoleIds',
        'identifier' => 'getIdentifier',
        'issuer' => 'getIssuer',
        'modified_at' => 'getModifiedAt',
        'modified_by' => 'getModifiedBy',
        'new_user_migration_types' => 'getNewUserMigrationTypes',
        'scopes' => 'getScopes',
        'secret' => 'getSecret',
        'set_roles_from_groups' => 'getSetRolesFromGroups',
        'test_slug' => 'getTestSlug',
        'token_endpoint' => 'getTokenEndpoint',
        'user_attribute_map_email' => 'getUserAttributeMapEmail',
        'user_attribute_map_first_name' => 'getUserAttributeMapFirstName',
        'user_attribute_map_last_name' => 'getUserAttributeMapLastName',
        'user_attributes' => 'getUserAttributes',
        'user_attributes_with_ids' => 'getUserAttributesWithIds',
        'userinfo_endpoint' => 'getUserinfoEndpoint',
        'allow_normal_group_membership' => 'getAllowNormalGroupMembership',
        'allow_roles_from_normal_groups' => 'getAllowRolesFromNormalGroups',
        'allow_direct_roles' => 'getAllowDirectRoles',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['alternate_email_login_allowed'] = $data['alternate_email_login_allowed'] ?? null;
        $this->container['audience'] = $data['audience'] ?? null;
        $this->container['auth_requires_role'] = $data['auth_requires_role'] ?? null;
        $this->container['authorization_endpoint'] = $data['authorization_endpoint'] ?? null;
        $this->container['default_new_user_group_ids'] = $data['default_new_user_group_ids'] ?? null;
        $this->container['default_new_user_groups'] = $data['default_new_user_groups'] ?? null;
        $this->container['default_new_user_role_ids'] = $data['default_new_user_role_ids'] ?? null;
        $this->container['default_new_user_roles'] = $data['default_new_user_roles'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
        $this->container['groups_attribute'] = $data['groups_attribute'] ?? null;
        $this->container['groups_with_role_ids'] = $data['groups_with_role_ids'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['issuer'] = $data['issuer'] ?? null;
        $this->container['modified_at'] = $data['modified_at'] ?? null;
        $this->container['modified_by'] = $data['modified_by'] ?? null;
        $this->container['new_user_migration_types'] = $data['new_user_migration_types'] ?? null;
        $this->container['scopes'] = $data['scopes'] ?? null;
        $this->container['secret'] = $data['secret'] ?? null;
        $this->container['set_roles_from_groups'] = $data['set_roles_from_groups'] ?? null;
        $this->container['test_slug'] = $data['test_slug'] ?? null;
        $this->container['token_endpoint'] = $data['token_endpoint'] ?? null;
        $this->container['user_attribute_map_email'] = $data['user_attribute_map_email'] ?? null;
        $this->container['user_attribute_map_first_name'] = $data['user_attribute_map_first_name'] ?? null;
        $this->container['user_attribute_map_last_name'] = $data['user_attribute_map_last_name'] ?? null;
        $this->container['user_attributes'] = $data['user_attributes'] ?? null;
        $this->container['user_attributes_with_ids'] = $data['user_attributes_with_ids'] ?? null;
        $this->container['userinfo_endpoint'] = $data['userinfo_endpoint'] ?? null;
        $this->container['allow_normal_group_membership'] = $data['allow_normal_group_membership'] ?? null;
        $this->container['allow_roles_from_normal_groups'] = $data['allow_roles_from_normal_groups'] ?? null;
        $this->container['allow_direct_roles'] = $data['allow_direct_roles'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets alternate_email_login_allowed
     *
     * @return bool|null
     */
    public function getAlternateEmailLoginAllowed()
    {
        return $this->container['alternate_email_login_allowed'];
    }

    /**
     * Sets alternate_email_login_allowed
     *
     * @param bool|null $alternate_email_login_allowed Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
     *
     * @return self
     */
    public function setAlternateEmailLoginAllowed($alternate_email_login_allowed)
    {
        $this->container['alternate_email_login_allowed'] = $alternate_email_login_allowed;

        return $this;
    }

    /**
     * Gets audience
     *
     * @return string|null
     */
    public function getAudience()
    {
        return $this->container['audience'];
    }

    /**
     * Sets audience
     *
     * @param string|null $audience OpenID Provider Audience
     *
     * @return self
     */
    public function setAudience($audience)
    {
        $this->container['audience'] = $audience;

        return $this;
    }

    /**
     * Gets auth_requires_role
     *
     * @return bool|null
     */
    public function getAuthRequiresRole()
    {
        return $this->container['auth_requires_role'];
    }

    /**
     * Sets auth_requires_role
     *
     * @param bool|null $auth_requires_role Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
     *
     * @return self
     */
    public function setAuthRequiresRole($auth_requires_role)
    {
        $this->container['auth_requires_role'] = $auth_requires_role;

        return $this;
    }

    /**
     * Gets authorization_endpoint
     *
     * @return string|null
     */
    public function getAuthorizationEndpoint()
    {
        return $this->container['authorization_endpoint'];
    }

    /**
     * Sets authorization_endpoint
     *
     * @param string|null $authorization_endpoint OpenID Provider Authorization Url
     *
     * @return self
     */
    public function setAuthorizationEndpoint($authorization_endpoint)
    {
        $this->container['authorization_endpoint'] = $authorization_endpoint;

        return $this;
    }

    /**
     * Gets default_new_user_group_ids
     *
     * @return int[]|null
     */
    public function getDefaultNewUserGroupIds()
    {
        return $this->container['default_new_user_group_ids'];
    }

    /**
     * Sets default_new_user_group_ids
     *
     * @param int[]|null $default_new_user_group_ids (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
     *
     * @return self
     */
    public function setDefaultNewUserGroupIds($default_new_user_group_ids)
    {
        $this->container['default_new_user_group_ids'] = $default_new_user_group_ids;

        return $this;
    }

    /**
     * Gets default_new_user_groups
     *
     * @return \OpenAPI\Client\Model\Group[]|null
     */
    public function getDefaultNewUserGroups()
    {
        return $this->container['default_new_user_groups'];
    }

    /**
     * Sets default_new_user_groups
     *
     * @param \OpenAPI\Client\Model\Group[]|null $default_new_user_groups (Read-only) Groups that will be applied to new users the first time they login via OIDC
     *
     * @return self
     */
    public function setDefaultNewUserGroups($default_new_user_groups)
    {
        $this->container['default_new_user_groups'] = $default_new_user_groups;

        return $this;
    }

    /**
     * Gets default_new_user_role_ids
     *
     * @return int[]|null
     */
    public function getDefaultNewUserRoleIds()
    {
        return $this->container['default_new_user_role_ids'];
    }

    /**
     * Sets default_new_user_role_ids
     *
     * @param int[]|null $default_new_user_role_ids (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
     *
     * @return self
     */
    public function setDefaultNewUserRoleIds($default_new_user_role_ids)
    {
        $this->container['default_new_user_role_ids'] = $default_new_user_role_ids;

        return $this;
    }

    /**
     * Gets default_new_user_roles
     *
     * @return \OpenAPI\Client\Model\Role[]|null
     */
    public function getDefaultNewUserRoles()
    {
        return $this->container['default_new_user_roles'];
    }

    /**
     * Sets default_new_user_roles
     *
     * @param \OpenAPI\Client\Model\Role[]|null $default_new_user_roles (Read-only) Roles that will be applied to new users the first time they login via OIDC
     *
     * @return self
     */
    public function setDefaultNewUserRoles($default_new_user_roles)
    {
        $this->container['default_new_user_roles'] = $default_new_user_roles;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Enable/Disable OIDC authentication for the server
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \OpenAPI\Client\Model\OIDCGroupRead[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \OpenAPI\Client\Model\OIDCGroupRead[]|null $groups (Read-only) Array of mappings between OIDC Groups and Looker Roles
     *
     * @return self
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets groups_attribute
     *
     * @return string|null
     */
    public function getGroupsAttribute()
    {
        return $this->container['groups_attribute'];
    }

    /**
     * Sets groups_attribute
     *
     * @param string|null $groups_attribute Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
     *
     * @return self
     */
    public function setGroupsAttribute($groups_attribute)
    {
        $this->container['groups_attribute'] = $groups_attribute;

        return $this;
    }

    /**
     * Gets groups_with_role_ids
     *
     * @return \OpenAPI\Client\Model\OIDCGroupWrite[]|null
     */
    public function getGroupsWithRoleIds()
    {
        return $this->container['groups_with_role_ids'];
    }

    /**
     * Sets groups_with_role_ids
     *
     * @param \OpenAPI\Client\Model\OIDCGroupWrite[]|null $groups_with_role_ids (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
     *
     * @return self
     */
    public function setGroupsWithRoleIds($groups_with_role_ids)
    {
        $this->container['groups_with_role_ids'] = $groups_with_role_ids;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier Relying Party Identifier (provided by OpenID Provider)
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string|null
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string|null $issuer OpenID Provider Issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime|null $modified_at When this config was last modified
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return int|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param int|null $modified_by User id of user who last modified this config
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets new_user_migration_types
     *
     * @return string|null
     */
    public function getNewUserMigrationTypes()
    {
        return $this->container['new_user_migration_types'];
    }

    /**
     * Sets new_user_migration_types
     *
     * @param string|null $new_user_migration_types Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
     *
     * @return self
     */
    public function setNewUserMigrationTypes($new_user_migration_types)
    {
        $this->container['new_user_migration_types'] = $new_user_migration_types;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes Array of scopes to request.
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret (Write-Only) Relying Party Secret (provided by OpenID Provider)
     *
     * @return self
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets set_roles_from_groups
     *
     * @return bool|null
     */
    public function getSetRolesFromGroups()
    {
        return $this->container['set_roles_from_groups'];
    }

    /**
     * Sets set_roles_from_groups
     *
     * @param bool|null $set_roles_from_groups Set user roles in Looker based on groups from OIDC
     *
     * @return self
     */
    public function setSetRolesFromGroups($set_roles_from_groups)
    {
        $this->container['set_roles_from_groups'] = $set_roles_from_groups;

        return $this;
    }

    /**
     * Gets test_slug
     *
     * @return string|null
     */
    public function getTestSlug()
    {
        return $this->container['test_slug'];
    }

    /**
     * Sets test_slug
     *
     * @param string|null $test_slug Slug to identify configurations that are created in order to run a OIDC config test
     *
     * @return self
     */
    public function setTestSlug($test_slug)
    {
        $this->container['test_slug'] = $test_slug;

        return $this;
    }

    /**
     * Gets token_endpoint
     *
     * @return string|null
     */
    public function getTokenEndpoint()
    {
        return $this->container['token_endpoint'];
    }

    /**
     * Sets token_endpoint
     *
     * @param string|null $token_endpoint OpenID Provider Token Url
     *
     * @return self
     */
    public function setTokenEndpoint($token_endpoint)
    {
        $this->container['token_endpoint'] = $token_endpoint;

        return $this;
    }

    /**
     * Gets user_attribute_map_email
     *
     * @return string|null
     */
    public function getUserAttributeMapEmail()
    {
        return $this->container['user_attribute_map_email'];
    }

    /**
     * Sets user_attribute_map_email
     *
     * @param string|null $user_attribute_map_email Name of user record attributes used to indicate email address field
     *
     * @return self
     */
    public function setUserAttributeMapEmail($user_attribute_map_email)
    {
        $this->container['user_attribute_map_email'] = $user_attribute_map_email;

        return $this;
    }

    /**
     * Gets user_attribute_map_first_name
     *
     * @return string|null
     */
    public function getUserAttributeMapFirstName()
    {
        return $this->container['user_attribute_map_first_name'];
    }

    /**
     * Sets user_attribute_map_first_name
     *
     * @param string|null $user_attribute_map_first_name Name of user record attributes used to indicate first name
     *
     * @return self
     */
    public function setUserAttributeMapFirstName($user_attribute_map_first_name)
    {
        $this->container['user_attribute_map_first_name'] = $user_attribute_map_first_name;

        return $this;
    }

    /**
     * Gets user_attribute_map_last_name
     *
     * @return string|null
     */
    public function getUserAttributeMapLastName()
    {
        return $this->container['user_attribute_map_last_name'];
    }

    /**
     * Sets user_attribute_map_last_name
     *
     * @param string|null $user_attribute_map_last_name Name of user record attributes used to indicate last name
     *
     * @return self
     */
    public function setUserAttributeMapLastName($user_attribute_map_last_name)
    {
        $this->container['user_attribute_map_last_name'] = $user_attribute_map_last_name;

        return $this;
    }

    /**
     * Gets user_attributes
     *
     * @return \OpenAPI\Client\Model\OIDCUserAttributeRead[]|null
     */
    public function getUserAttributes()
    {
        return $this->container['user_attributes'];
    }

    /**
     * Sets user_attributes
     *
     * @param \OpenAPI\Client\Model\OIDCUserAttributeRead[]|null $user_attributes (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes
     *
     * @return self
     */
    public function setUserAttributes($user_attributes)
    {
        $this->container['user_attributes'] = $user_attributes;

        return $this;
    }

    /**
     * Gets user_attributes_with_ids
     *
     * @return \OpenAPI\Client\Model\OIDCUserAttributeWrite[]|null
     */
    public function getUserAttributesWithIds()
    {
        return $this->container['user_attributes_with_ids'];
    }

    /**
     * Sets user_attributes_with_ids
     *
     * @param \OpenAPI\Client\Model\OIDCUserAttributeWrite[]|null $user_attributes_with_ids (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
     *
     * @return self
     */
    public function setUserAttributesWithIds($user_attributes_with_ids)
    {
        $this->container['user_attributes_with_ids'] = $user_attributes_with_ids;

        return $this;
    }

    /**
     * Gets userinfo_endpoint
     *
     * @return string|null
     */
    public function getUserinfoEndpoint()
    {
        return $this->container['userinfo_endpoint'];
    }

    /**
     * Sets userinfo_endpoint
     *
     * @param string|null $userinfo_endpoint OpenID Provider User Information Url
     *
     * @return self
     */
    public function setUserinfoEndpoint($userinfo_endpoint)
    {
        $this->container['userinfo_endpoint'] = $userinfo_endpoint;

        return $this;
    }

    /**
     * Gets allow_normal_group_membership
     *
     * @return bool|null
     */
    public function getAllowNormalGroupMembership()
    {
        return $this->container['allow_normal_group_membership'];
    }

    /**
     * Sets allow_normal_group_membership
     *
     * @param bool|null $allow_normal_group_membership Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
     *
     * @return self
     */
    public function setAllowNormalGroupMembership($allow_normal_group_membership)
    {
        $this->container['allow_normal_group_membership'] = $allow_normal_group_membership;

        return $this;
    }

    /**
     * Gets allow_roles_from_normal_groups
     *
     * @return bool|null
     */
    public function getAllowRolesFromNormalGroups()
    {
        return $this->container['allow_roles_from_normal_groups'];
    }

    /**
     * Sets allow_roles_from_normal_groups
     *
     * @param bool|null $allow_roles_from_normal_groups OIDC auth'd users will inherit roles from non-reflected Looker groups.
     *
     * @return self
     */
    public function setAllowRolesFromNormalGroups($allow_roles_from_normal_groups)
    {
        $this->container['allow_roles_from_normal_groups'] = $allow_roles_from_normal_groups;

        return $this;
    }

    /**
     * Gets allow_direct_roles
     *
     * @return bool|null
     */
    public function getAllowDirectRoles()
    {
        return $this->container['allow_direct_roles'];
    }

    /**
     * Sets allow_direct_roles
     *
     * @param bool|null $allow_direct_roles Allows roles to be directly assigned to OIDC auth'd users.
     *
     * @return self
     */
    public function setAllowDirectRoles($allow_direct_roles)
    {
        $this->container['allow_direct_roles'] = $allow_direct_roles;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Link to get this item
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


