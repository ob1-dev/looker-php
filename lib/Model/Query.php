<?php
/**
 * Query
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Query Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Query implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Query';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'id' => 'int',
        'model' => 'string',
        'view' => 'string',
        'fields' => 'string[]',
        'pivots' => 'string[]',
        'fill_fields' => 'string[]',
        'filters' => 'array<string,string>',
        'filter_expression' => 'string',
        'sorts' => 'string[]',
        'limit' => 'string',
        'column_limit' => 'string',
        'total' => 'bool',
        'row_total' => 'string',
        'subtotals' => 'string[]',
        'vis_config' => 'array<string,Any>',
        'filter_config' => 'array<string,Any>',
        'visible_ui_sections' => 'string',
        'slug' => 'string',
        'dynamic_fields' => 'string',
        'client_id' => 'string',
        'share_url' => 'string',
        'expanded_share_url' => 'string',
        'url' => 'string',
        'query_timezone' => 'string',
        'has_table_calculations' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'id' => 'int64',
        'model' => null,
        'view' => null,
        'fields' => null,
        'pivots' => null,
        'fill_fields' => null,
        'filters' => null,
        'filter_expression' => null,
        'sorts' => null,
        'limit' => null,
        'column_limit' => null,
        'total' => null,
        'row_total' => null,
        'subtotals' => null,
        'vis_config' => 'any',
        'filter_config' => 'any',
        'visible_ui_sections' => null,
        'slug' => null,
        'dynamic_fields' => null,
        'client_id' => null,
        'share_url' => null,
        'expanded_share_url' => null,
        'url' => null,
        'query_timezone' => null,
        'has_table_calculations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'id' => 'id',
        'model' => 'model',
        'view' => 'view',
        'fields' => 'fields',
        'pivots' => 'pivots',
        'fill_fields' => 'fill_fields',
        'filters' => 'filters',
        'filter_expression' => 'filter_expression',
        'sorts' => 'sorts',
        'limit' => 'limit',
        'column_limit' => 'column_limit',
        'total' => 'total',
        'row_total' => 'row_total',
        'subtotals' => 'subtotals',
        'vis_config' => 'vis_config',
        'filter_config' => 'filter_config',
        'visible_ui_sections' => 'visible_ui_sections',
        'slug' => 'slug',
        'dynamic_fields' => 'dynamic_fields',
        'client_id' => 'client_id',
        'share_url' => 'share_url',
        'expanded_share_url' => 'expanded_share_url',
        'url' => 'url',
        'query_timezone' => 'query_timezone',
        'has_table_calculations' => 'has_table_calculations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'id' => 'setId',
        'model' => 'setModel',
        'view' => 'setView',
        'fields' => 'setFields',
        'pivots' => 'setPivots',
        'fill_fields' => 'setFillFields',
        'filters' => 'setFilters',
        'filter_expression' => 'setFilterExpression',
        'sorts' => 'setSorts',
        'limit' => 'setLimit',
        'column_limit' => 'setColumnLimit',
        'total' => 'setTotal',
        'row_total' => 'setRowTotal',
        'subtotals' => 'setSubtotals',
        'vis_config' => 'setVisConfig',
        'filter_config' => 'setFilterConfig',
        'visible_ui_sections' => 'setVisibleUiSections',
        'slug' => 'setSlug',
        'dynamic_fields' => 'setDynamicFields',
        'client_id' => 'setClientId',
        'share_url' => 'setShareUrl',
        'expanded_share_url' => 'setExpandedShareUrl',
        'url' => 'setUrl',
        'query_timezone' => 'setQueryTimezone',
        'has_table_calculations' => 'setHasTableCalculations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'id' => 'getId',
        'model' => 'getModel',
        'view' => 'getView',
        'fields' => 'getFields',
        'pivots' => 'getPivots',
        'fill_fields' => 'getFillFields',
        'filters' => 'getFilters',
        'filter_expression' => 'getFilterExpression',
        'sorts' => 'getSorts',
        'limit' => 'getLimit',
        'column_limit' => 'getColumnLimit',
        'total' => 'getTotal',
        'row_total' => 'getRowTotal',
        'subtotals' => 'getSubtotals',
        'vis_config' => 'getVisConfig',
        'filter_config' => 'getFilterConfig',
        'visible_ui_sections' => 'getVisibleUiSections',
        'slug' => 'getSlug',
        'dynamic_fields' => 'getDynamicFields',
        'client_id' => 'getClientId',
        'share_url' => 'getShareUrl',
        'expanded_share_url' => 'getExpandedShareUrl',
        'url' => 'getUrl',
        'query_timezone' => 'getQueryTimezone',
        'has_table_calculations' => 'getHasTableCalculations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['view'] = $data['view'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['pivots'] = $data['pivots'] ?? null;
        $this->container['fill_fields'] = $data['fill_fields'] ?? null;
        $this->container['filters'] = $data['filters'] ?? null;
        $this->container['filter_expression'] = $data['filter_expression'] ?? null;
        $this->container['sorts'] = $data['sorts'] ?? null;
        $this->container['limit'] = $data['limit'] ?? null;
        $this->container['column_limit'] = $data['column_limit'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['row_total'] = $data['row_total'] ?? null;
        $this->container['subtotals'] = $data['subtotals'] ?? null;
        $this->container['vis_config'] = $data['vis_config'] ?? null;
        $this->container['filter_config'] = $data['filter_config'] ?? null;
        $this->container['visible_ui_sections'] = $data['visible_ui_sections'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['dynamic_fields'] = $data['dynamic_fields'] ?? null;
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['share_url'] = $data['share_url'] ?? null;
        $this->container['expanded_share_url'] = $data['expanded_share_url'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['query_timezone'] = $data['query_timezone'] ?? null;
        $this->container['has_table_calculations'] = $data['has_table_calculations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['view'] === null) {
            $invalidProperties[] = "'view' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique Id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Model
     *
     * @return self
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets view
     *
     * @return string
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param string $view Explore Name
     *
     * @return self
     */
    public function setView($view)
    {
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields Fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets pivots
     *
     * @return string[]|null
     */
    public function getPivots()
    {
        return $this->container['pivots'];
    }

    /**
     * Sets pivots
     *
     * @param string[]|null $pivots Pivots
     *
     * @return self
     */
    public function setPivots($pivots)
    {
        $this->container['pivots'] = $pivots;

        return $this;
    }

    /**
     * Gets fill_fields
     *
     * @return string[]|null
     */
    public function getFillFields()
    {
        return $this->container['fill_fields'];
    }

    /**
     * Sets fill_fields
     *
     * @param string[]|null $fill_fields Fill Fields
     *
     * @return self
     */
    public function setFillFields($fill_fields)
    {
        $this->container['fill_fields'] = $fill_fields;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return array<string,string>|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param array<string,string>|null $filters Filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets filter_expression
     *
     * @return string|null
     */
    public function getFilterExpression()
    {
        return $this->container['filter_expression'];
    }

    /**
     * Sets filter_expression
     *
     * @param string|null $filter_expression Filter Expression
     *
     * @return self
     */
    public function setFilterExpression($filter_expression)
    {
        $this->container['filter_expression'] = $filter_expression;

        return $this;
    }

    /**
     * Gets sorts
     *
     * @return string[]|null
     */
    public function getSorts()
    {
        return $this->container['sorts'];
    }

    /**
     * Sets sorts
     *
     * @param string[]|null $sorts Sorting for the query results. Use the format `[\"view.field\", ...]` to sort on fields in ascending order. Use the format `[\"view.field desc\", ...]` to sort on fields in descending order. Use `[\"__UNSORTED__\"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
     *
     * @return self
     */
    public function setSorts($sorts)
    {
        $this->container['sorts'] = $sorts;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return string|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param string|null $limit Limit
     *
     * @return self
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets column_limit
     *
     * @return string|null
     */
    public function getColumnLimit()
    {
        return $this->container['column_limit'];
    }

    /**
     * Sets column_limit
     *
     * @param string|null $column_limit Column Limit
     *
     * @return self
     */
    public function setColumnLimit($column_limit)
    {
        $this->container['column_limit'] = $column_limit;

        return $this;
    }

    /**
     * Gets total
     *
     * @return bool|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param bool|null $total Total
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets row_total
     *
     * @return string|null
     */
    public function getRowTotal()
    {
        return $this->container['row_total'];
    }

    /**
     * Sets row_total
     *
     * @param string|null $row_total Raw Total
     *
     * @return self
     */
    public function setRowTotal($row_total)
    {
        $this->container['row_total'] = $row_total;

        return $this;
    }

    /**
     * Gets subtotals
     *
     * @return string[]|null
     */
    public function getSubtotals()
    {
        return $this->container['subtotals'];
    }

    /**
     * Sets subtotals
     *
     * @param string[]|null $subtotals Fields on which to run subtotals
     *
     * @return self
     */
    public function setSubtotals($subtotals)
    {
        $this->container['subtotals'] = $subtotals;

        return $this;
    }

    /**
     * Gets vis_config
     *
     * @return array<string,Any>|null
     */
    public function getVisConfig()
    {
        return $this->container['vis_config'];
    }

    /**
     * Sets vis_config
     *
     * @param array<string,Any>|null $vis_config Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
     *
     * @return self
     */
    public function setVisConfig($vis_config)
    {
        $this->container['vis_config'] = $vis_config;

        return $this;
    }

    /**
     * Gets filter_config
     *
     * @return array<string,Any>|null
     */
    public function getFilterConfig()
    {
        return $this->container['filter_config'];
    }

    /**
     * Sets filter_config
     *
     * @param array<string,Any>|null $filter_config The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over \"filters\". When creating a query or modifying an existing query, \"filter_config\" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
     *
     * @return self
     */
    public function setFilterConfig($filter_config)
    {
        $this->container['filter_config'] = $filter_config;

        return $this;
    }

    /**
     * Gets visible_ui_sections
     *
     * @return string|null
     */
    public function getVisibleUiSections()
    {
        return $this->container['visible_ui_sections'];
    }

    /**
     * Sets visible_ui_sections
     *
     * @param string|null $visible_ui_sections Visible UI Sections
     *
     * @return self
     */
    public function setVisibleUiSections($visible_ui_sections)
    {
        $this->container['visible_ui_sections'] = $visible_ui_sections;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug Slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets dynamic_fields
     *
     * @return string|null
     */
    public function getDynamicFields()
    {
        return $this->container['dynamic_fields'];
    }

    /**
     * Sets dynamic_fields
     *
     * @param string|null $dynamic_fields Dynamic Fields
     *
     * @return self
     */
    public function setDynamicFields($dynamic_fields)
    {
        $this->container['dynamic_fields'] = $dynamic_fields;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets share_url
     *
     * @return string|null
     */
    public function getShareUrl()
    {
        return $this->container['share_url'];
    }

    /**
     * Sets share_url
     *
     * @param string|null $share_url Share Url
     *
     * @return self
     */
    public function setShareUrl($share_url)
    {
        $this->container['share_url'] = $share_url;

        return $this;
    }

    /**
     * Gets expanded_share_url
     *
     * @return string|null
     */
    public function getExpandedShareUrl()
    {
        return $this->container['expanded_share_url'];
    }

    /**
     * Sets expanded_share_url
     *
     * @param string|null $expanded_share_url Expanded Share Url
     *
     * @return self
     */
    public function setExpandedShareUrl($expanded_share_url)
    {
        $this->container['expanded_share_url'] = $expanded_share_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Expanded Url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets query_timezone
     *
     * @return string|null
     */
    public function getQueryTimezone()
    {
        return $this->container['query_timezone'];
    }

    /**
     * Sets query_timezone
     *
     * @param string|null $query_timezone Query Timezone
     *
     * @return self
     */
    public function setQueryTimezone($query_timezone)
    {
        $this->container['query_timezone'] = $query_timezone;

        return $this;
    }

    /**
     * Gets has_table_calculations
     *
     * @return bool|null
     */
    public function getHasTableCalculations()
    {
        return $this->container['has_table_calculations'];
    }

    /**
     * Sets has_table_calculations
     *
     * @param bool|null $has_table_calculations Has Table Calculations
     *
     * @return self
     */
    public function setHasTableCalculations($has_table_calculations)
    {
        $this->container['has_table_calculations'] = $has_table_calculations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


