<?php
/**
 * SqlQuery
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SqlQuery Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SqlQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SqlQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'slug' => 'string',
        'last_runtime' => 'float',
        'run_count' => 'int',
        'browser_limit' => 'int',
        'sql' => 'string',
        'last_run_at' => 'string',
        'connection' => '\OpenAPI\Client\Model\DBConnectionBase',
        'model_name' => 'string',
        'creator' => '\OpenAPI\Client\Model\UserPublic',
        'explore_url' => 'string',
        'plaintext' => 'bool',
        'vis_config' => 'array<string,Any>',
        'result_maker_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'slug' => null,
        'last_runtime' => 'float',
        'run_count' => 'int64',
        'browser_limit' => 'int64',
        'sql' => null,
        'last_run_at' => null,
        'connection' => null,
        'model_name' => null,
        'creator' => null,
        'explore_url' => null,
        'plaintext' => null,
        'vis_config' => 'any',
        'result_maker_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'slug' => 'slug',
        'last_runtime' => 'last_runtime',
        'run_count' => 'run_count',
        'browser_limit' => 'browser_limit',
        'sql' => 'sql',
        'last_run_at' => 'last_run_at',
        'connection' => 'connection',
        'model_name' => 'model_name',
        'creator' => 'creator',
        'explore_url' => 'explore_url',
        'plaintext' => 'plaintext',
        'vis_config' => 'vis_config',
        'result_maker_id' => 'result_maker_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'slug' => 'setSlug',
        'last_runtime' => 'setLastRuntime',
        'run_count' => 'setRunCount',
        'browser_limit' => 'setBrowserLimit',
        'sql' => 'setSql',
        'last_run_at' => 'setLastRunAt',
        'connection' => 'setConnection',
        'model_name' => 'setModelName',
        'creator' => 'setCreator',
        'explore_url' => 'setExploreUrl',
        'plaintext' => 'setPlaintext',
        'vis_config' => 'setVisConfig',
        'result_maker_id' => 'setResultMakerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'slug' => 'getSlug',
        'last_runtime' => 'getLastRuntime',
        'run_count' => 'getRunCount',
        'browser_limit' => 'getBrowserLimit',
        'sql' => 'getSql',
        'last_run_at' => 'getLastRunAt',
        'connection' => 'getConnection',
        'model_name' => 'getModelName',
        'creator' => 'getCreator',
        'explore_url' => 'getExploreUrl',
        'plaintext' => 'getPlaintext',
        'vis_config' => 'getVisConfig',
        'result_maker_id' => 'getResultMakerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can'] = $data['can'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['last_runtime'] = $data['last_runtime'] ?? null;
        $this->container['run_count'] = $data['run_count'] ?? null;
        $this->container['browser_limit'] = $data['browser_limit'] ?? null;
        $this->container['sql'] = $data['sql'] ?? null;
        $this->container['last_run_at'] = $data['last_run_at'] ?? null;
        $this->container['connection'] = $data['connection'] ?? null;
        $this->container['model_name'] = $data['model_name'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['explore_url'] = $data['explore_url'] ?? null;
        $this->container['plaintext'] = $data['plaintext'] ?? null;
        $this->container['vis_config'] = $data['vis_config'] ?? null;
        $this->container['result_maker_id'] = $data['result_maker_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug The identifier of the SQL query
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets last_runtime
     *
     * @return float|null
     */
    public function getLastRuntime()
    {
        return $this->container['last_runtime'];
    }

    /**
     * Sets last_runtime
     *
     * @param float|null $last_runtime Number of seconds this query took to run the most recent time it was run
     *
     * @return self
     */
    public function setLastRuntime($last_runtime)
    {
        $this->container['last_runtime'] = $last_runtime;

        return $this;
    }

    /**
     * Gets run_count
     *
     * @return int|null
     */
    public function getRunCount()
    {
        return $this->container['run_count'];
    }

    /**
     * Sets run_count
     *
     * @param int|null $run_count Number of times this query has been run
     *
     * @return self
     */
    public function setRunCount($run_count)
    {
        $this->container['run_count'] = $run_count;

        return $this;
    }

    /**
     * Gets browser_limit
     *
     * @return int|null
     */
    public function getBrowserLimit()
    {
        return $this->container['browser_limit'];
    }

    /**
     * Sets browser_limit
     *
     * @param int|null $browser_limit Maximum number of rows this query will display on the SQL Runner page
     *
     * @return self
     */
    public function setBrowserLimit($browser_limit)
    {
        $this->container['browser_limit'] = $browser_limit;

        return $this;
    }

    /**
     * Gets sql
     *
     * @return string|null
     */
    public function getSql()
    {
        return $this->container['sql'];
    }

    /**
     * Sets sql
     *
     * @param string|null $sql SQL query text
     *
     * @return self
     */
    public function setSql($sql)
    {
        $this->container['sql'] = $sql;

        return $this;
    }

    /**
     * Gets last_run_at
     *
     * @return string|null
     */
    public function getLastRunAt()
    {
        return $this->container['last_run_at'];
    }

    /**
     * Sets last_run_at
     *
     * @param string|null $last_run_at The most recent time this query was run
     *
     * @return self
     */
    public function setLastRunAt($last_run_at)
    {
        $this->container['last_run_at'] = $last_run_at;

        return $this;
    }

    /**
     * Gets connection
     *
     * @return \OpenAPI\Client\Model\DBConnectionBase|null
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     *
     * @param \OpenAPI\Client\Model\DBConnectionBase|null $connection connection
     *
     * @return self
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string|null
     */
    public function getModelName()
    {
        return $this->container['model_name'];
    }

    /**
     * Sets model_name
     *
     * @param string|null $model_name Model name this query uses
     *
     * @return self
     */
    public function setModelName($model_name)
    {
        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\UserPublic|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\UserPublic|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets explore_url
     *
     * @return string|null
     */
    public function getExploreUrl()
    {
        return $this->container['explore_url'];
    }

    /**
     * Sets explore_url
     *
     * @param string|null $explore_url Explore page URL for this SQL query
     *
     * @return self
     */
    public function setExploreUrl($explore_url)
    {
        $this->container['explore_url'] = $explore_url;

        return $this;
    }

    /**
     * Gets plaintext
     *
     * @return bool|null
     */
    public function getPlaintext()
    {
        return $this->container['plaintext'];
    }

    /**
     * Sets plaintext
     *
     * @param bool|null $plaintext Should this query be rendered as plain text
     *
     * @return self
     */
    public function setPlaintext($plaintext)
    {
        $this->container['plaintext'] = $plaintext;

        return $this;
    }

    /**
     * Gets vis_config
     *
     * @return array<string,Any>|null
     */
    public function getVisConfig()
    {
        return $this->container['vis_config'];
    }

    /**
     * Sets vis_config
     *
     * @param array<string,Any>|null $vis_config Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
     *
     * @return self
     */
    public function setVisConfig($vis_config)
    {
        $this->container['vis_config'] = $vis_config;

        return $this;
    }

    /**
     * Gets result_maker_id
     *
     * @return int|null
     */
    public function getResultMakerId()
    {
        return $this->container['result_maker_id'];
    }

    /**
     * Sets result_maker_id
     *
     * @param int|null $result_maker_id ID of the ResultMakerLookup entry.
     *
     * @return self
     */
    public function setResultMakerId($result_maker_id)
    {
        $this->container['result_maker_id'] = $result_maker_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


