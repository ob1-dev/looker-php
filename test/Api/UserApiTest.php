<?php
/**
 * UserApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 (Experimental) Reference
 *
 * Welcome to the future! API 4.0 co-exists with APIs 3.1 and 3.0. (3.0 should no longer be used.) We've tagged 4.0 as \"experimental\" to indicate work still planned for API 4.0 may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### In This Release  API 4.0 version was introduced so we can make adjustments to API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  While API 3.1 is still the de-facto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity has shifted to API 4.0, where all new features are added.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 4.0.21.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UserApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for allUserCredentialsApi3s
     *
     * Get All API 3 Credentials.
     *
     */
    public function testAllUserCredentialsApi3s()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUserCredentialsEmbeds
     *
     * Get All Embedding Credentials.
     *
     */
    public function testAllUserCredentialsEmbeds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUserSessions
     *
     * Get All Web Login Sessions.
     *
     */
    public function testAllUserSessions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUsers
     *
     * Get All Users.
     *
     */
    public function testAllUsers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createEmbedUser
     *
     * Create an embed user from an external user ID.
     *
     */
    public function testCreateEmbedUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUser
     *
     * Create User.
     *
     */
    public function testCreateUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsApi3
     *
     * Create API 3 Credential.
     *
     */
    public function testCreateUserCredentialsApi3()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsEmail
     *
     * Create Email/Password Credential.
     *
     */
    public function testCreateUserCredentialsEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsEmailPasswordReset
     *
     * Create Password Reset Token.
     *
     */
    public function testCreateUserCredentialsEmailPasswordReset()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsTotp
     *
     * Create Two-Factor Credential.
     *
     */
    public function testCreateUserCredentialsTotp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUser
     *
     * Delete User.
     *
     */
    public function testDeleteUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserAttributeUserValue
     *
     * Delete User Attribute User Value.
     *
     */
    public function testDeleteUserAttributeUserValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsApi3
     *
     * Delete API 3 Credential.
     *
     */
    public function testDeleteUserCredentialsApi3()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsEmail
     *
     * Delete Email/Password Credential.
     *
     */
    public function testDeleteUserCredentialsEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsEmbed
     *
     * Delete Embedding Credential.
     *
     */
    public function testDeleteUserCredentialsEmbed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsGoogle
     *
     * Delete Google Auth Credential.
     *
     */
    public function testDeleteUserCredentialsGoogle()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsLdap
     *
     * Delete LDAP Credential.
     *
     */
    public function testDeleteUserCredentialsLdap()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsLookerOpenid
     *
     * Delete Looker OpenId Credential.
     *
     */
    public function testDeleteUserCredentialsLookerOpenid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsOidc
     *
     * Delete OIDC Auth Credential.
     *
     */
    public function testDeleteUserCredentialsOidc()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsSaml
     *
     * Delete Saml Auth Credential.
     *
     */
    public function testDeleteUserCredentialsSaml()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsTotp
     *
     * Delete Two-Factor Credential.
     *
     */
    public function testDeleteUserCredentialsTotp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserSession
     *
     * Delete Web Login Session.
     *
     */
    public function testDeleteUserSession()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for me
     *
     * Get Current User.
     *
     */
    public function testMe()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUsers
     *
     * Search Users.
     *
     */
    public function testSearchUsers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUsersNames
     *
     * Search User Names.
     *
     */
    public function testSearchUsersNames()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendUserCredentialsEmailPasswordReset
     *
     * Send Password Reset Token.
     *
     */
    public function testSendUserCredentialsEmailPasswordReset()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setUserAttributeUserValue
     *
     * Set User Attribute User Value.
     *
     */
    public function testSetUserAttributeUserValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setUserRoles
     *
     * Set User Roles.
     *
     */
    public function testSetUserRoles()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUser
     *
     * Update User.
     *
     */
    public function testUpdateUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUserCredentialsEmail
     *
     * Update Email/Password Credential.
     *
     */
    public function testUpdateUserCredentialsEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for user
     *
     * Get User by Id.
     *
     */
    public function testUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userAttributeUserValues
     *
     * Get User Attribute Values.
     *
     */
    public function testUserAttributeUserValues()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsApi3
     *
     * Get API 3 Credential.
     *
     */
    public function testUserCredentialsApi3()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsEmail
     *
     * Get Email/Password Credential.
     *
     */
    public function testUserCredentialsEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsEmbed
     *
     * Get Embedding Credential.
     *
     */
    public function testUserCredentialsEmbed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsGoogle
     *
     * Get Google Auth Credential.
     *
     */
    public function testUserCredentialsGoogle()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsLdap
     *
     * Get LDAP Credential.
     *
     */
    public function testUserCredentialsLdap()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsLookerOpenid
     *
     * Get Looker OpenId Credential.
     *
     */
    public function testUserCredentialsLookerOpenid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsOidc
     *
     * Get OIDC Auth Credential.
     *
     */
    public function testUserCredentialsOidc()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsSaml
     *
     * Get Saml Auth Credential.
     *
     */
    public function testUserCredentialsSaml()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsTotp
     *
     * Get Two-Factor Credential.
     *
     */
    public function testUserCredentialsTotp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userForCredential
     *
     * Get User by Credential Id.
     *
     */
    public function testUserForCredential()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userRoles
     *
     * Get User Roles.
     *
     */
    public function testUserRoles()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSession
     *
     * Get Web Login Session.
     *
     */
    public function testUserSession()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
